{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The TardiSat Project","text":""},{"location":"#satellite-lorawan-ttn-gateway","title":"Satellite LoRaWAN TTN gateway","text":"<p>TardiSat is a project for a picosatellite that acts as a gateway to The Things Network and as such can connect to the Internet and provide (low-speed, low-bandwidth) Internet coverage in rural areas.</p>"},{"location":"#alternatives-meshtastic","title":"Alternatives: Meshtastic","text":"<p>Meshtastic is being evaluated as an alternative, but compared to TTN there are no range tests that have gone past 500 km, so we can't in good faith rely on solid technology in unproven areas.</p>"},{"location":"#lora-modulation","title":"LoRa Modulation","text":"<p>You can see a detailed description of how the LoRa physical layer works in the following article</p>"},{"location":"#hardware","title":"Hardware","text":""},{"location":"#lilygo-board","title":"LILYGO board","text":"<p>Currently, we are prototyping with two LYLYGO T3_V1.6.1 modules with the following pinout: </p> <p>You can learn more about this board and others from the same series on the official GitHub repository.</p>"},{"location":"#software","title":"Software","text":"<p>We recently changed to PlatformIO for prototyping in a more advanced development environment. Currently, we have tested simplex communication between both boards with the following code:  rx_test.cpp<pre><code>#include &lt;Arduino.h&gt;\n#include &lt;SPI.h&gt;\n#include &lt;LoRa.h&gt;\n\n#include &lt;Wire.h&gt;\n#include &lt;Adafruit_GFX.h&gt;\n#include &lt;Adafruit_SSD1306.h&gt;\n\n#define SCK 5\n#define MISO 19\n#define MOSI 27\n#define SS 18\n#define RST 23 //si no funciona prueba con 14 y si no 12\n#define DIO0 26\n\n#define BAND 868E6\n\n#define OLED_SDA 4\n#define OLED_SCL 15 \n#define SCREEN_WIDTH 128 // OLED display width, in pixels\n#define SCREEN_HEIGHT 64 // OLED display height, in pixels\n\nAdafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, OLED_RST);\n\nString LoRaData;\n\nvoid setup() { \n  //initialize Serial Monitor\n  Serial.begin(115200);\n\n  //reset OLED display via software\n  pinMode(OLED_RST, OUTPUT);\n  digitalWrite(OLED_RST, LOW);\n  delay(20);\n  digitalWrite(OLED_RST, HIGH);\n\n  //initialize OLED\n  Wire.begin(OLED_SDA, OLED_SCL);\n  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3c, false, false)) { // Address 0x3C for 128x32\n    Serial.println(F(\"Asignacion a SSD1306 fallida\"));\n    for(;;); // Don't proceed, loop forever\n  }\n\n  display.clearDisplay();\n  display.setTextColor(WHITE);\n  display.setTextSize(1);\n  display.setCursor(0,0);\n  display.print(\"LORA RECEIVER \");\n  display.display();\n\n  Serial.println(\"LoRa Receiver Test\");\n\n  //SPI LoRa pins\n  SPI.begin(SCK, MISO, MOSI, SS);\n  //setup LoRa transceiver module\n  LoRa.setPins(SS, RST, DIO0);\n\n  if (!LoRa.begin(BAND)) {\n    Serial.println(\"Fallo al inicializar LoRa!\");\n    while (1);\n  }\n  Serial.println(\"LoRa inicializacion OK!\");\n  display.setCursor(0,10);\n  display.println(\"LoRa inicializacion OK!\");\n  display.display();  \n}\n\nvoid loop() {\n\n  //try to parse packet\n  int packetSize = LoRa.parsePacket();\n  if (packetSize) {\n    //received a packet\n    Serial.print(\"Recibido el paquete \");\n\n    //read packet\n    while (LoRa.available()) {\n      LoRaData = LoRa.readString();\n      Serial.print(LoRaData);\n    }\n\n    //print RSSI of packet\n    int rssi = LoRa.packetRssi();\n    Serial.print(\" con RSSI \");    \n    Serial.println(rssi);\n\n   // Dsiplay information\n   display.clearDisplay();\n   display.setCursor(0,0);\n   display.print(\"LORA RECEIVER\");\n   display.setCursor(0,20);\n   display.print(\"Recibido el paquete:\");\n   display.setCursor(0,30);\n   display.print(LoRaData);\n   display.setCursor(0,40);\n   display.print(\"RSSI:\");\n   display.setCursor(30,40);\n   display.print(rssi);\n   display.display();   \n  }\n}\n</code></pre></p> tx_test.cpp<pre><code>#include &lt;SPI.h&gt;\n#include &lt;LoRa.h&gt;\n\n#include &lt;Wire.h&gt;\n#include &lt;Adafruit_GFX.h&gt;\n#include &lt;Adafruit_SSD1306.h&gt;\n\n#define SCK 5\n#define MISO 19\n#define MOSI 27\n#define SS 18\n#define RST 23\n#define DIO0 26\n\n#define BAND 868E6\n\n#define OLED_SDA 21\n#define OLED_SCL 22 \n#define SCREEN_WIDTH 128 // OLED display width, in pixels\n#define SCREEN_HEIGHT 64 // OLED display height, in pixels\n\n//packet counter\nint counter = 0;\n\nAdafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, OLED_RST);\n\nvoid setup() {\n  Serial.begin(115200);\n\n  //reset OLED display via software\n  pinMode(OLED_RST, OUTPUT);\n  digitalWrite(OLED_RST, LOW);\n  delay(20);\n  digitalWrite(OLED_RST, HIGH);\n\n  //initialize OLED\n  Wire.begin(OLED_SDA, OLED_SCL);\n  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3c, false, false)) { // Address 0x3C for 128x32\n    Serial.println(F(\"asignacion a SSD1306 fallida\"));\n    for(;;); // Don't proceed, loop forever\n  }\n\n  display.clearDisplay();\n  display.setTextColor(WHITE);\n  display.setTextSize(1);\n  display.setCursor(0,0);\n  display.print(\"LORA SENDER \");\n  display.display();\n\n  Serial.println(\"LoRa Sender Test\");\n\n  //SPI LoRa pins\n  SPI.begin(SCK, MISO, MOSI, SS);\n  //setup LoRa transceiver module\n  LoRa.setPins(SS, RST, DIO0);\n\n  if (!LoRa.begin(BAND)) {\n    Serial.println(\"Fallo al inicializar LoRa!\");\n    while (1);\n  }\n  Serial.println(\"LoRa inicializacion OK!\");\n  display.setCursor(0,10);\n  display.print(\"LoRa inicializacion OK!\");\n  display.display();\n  delay(2000);\n}\n\nvoid loop() {\n\n  Serial.print(\"Enviando paquete: \");\n  Serial.println(counter);\n\n  //Send LoRa packet to receiver\n  LoRa.beginPacket();\n  LoRa.print(\"hola \");\n  LoRa.print(counter);\n  LoRa.endPacket();\n\n  display.clearDisplay();\n  display.setCursor(0,0);\n  display.println(\"LORA SENDER\");\n  display.setCursor(0,20);\n  display.setTextSize(1);\n  display.print(\"paquete LoRa enviado.\");\n  display.setCursor(0,30);\n  display.print(\"Contador:\");\n  display.setCursor(50,30);\n  display.print(counter);      \n  display.display();\n\n  counter++;\n\n  delay(10000);\n}\n</code></pre>"},{"location":"#platformio-setup","title":"PlatformIO setup","text":""},{"location":"#lorawan-ttn-integration","title":"LoRaWAN TTN integration","text":""},{"location":"#testing-suite","title":"Testing suite","text":""},{"location":"#unit-tests","title":"Unit tests","text":""},{"location":"#integration-tests","title":"Integration tests","text":""},{"location":"#end-to-end-test","title":"End-to-end test","text":""}]}